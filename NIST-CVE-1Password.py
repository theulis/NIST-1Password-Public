import http.client
import re
import json
import time
import sys


### Progress Bar - To stderr, so our CVS output to stay clean.
def print_progress(current, total):
    if not sys.stderr.isatty():
        return

    percent = int((current / total) * 100)
    bar_len = 40
    filled_len = int(bar_len * current // total)
    bar = "#" * filled_len + "-" * (bar_len - filled_len)
    sys.stderr.write(f"\r[{bar}] {percent}%")
    sys.stderr.flush()

    if current == total:
        # clear line after finishing
        sys.stderr.write("\r" + " " * (bar_len + 10) + "\r")
        sys.stderr.flush()

# Fetch 1Password macOS stable versions
conn = http.client.HTTPSConnection("releases.1password.com")
conn.request("GET", "/mac/stable/index.xml")
res = conn.getresponse()
xml_data = res.read().decode("utf-8")

# Extract versions with regex
matches = re.findall(r'https://releases\.1password\.com/mac/stable/([\d\.]+)', xml_data)

# Remove duplicates and sort numerically
versions = sorted(set(matches), key=lambda s: list(map(int, s.split('.'))))


## Sometimes the NIST API is not stable, so we will re-run the same GET a few times to get the correct data.
MAX_RETRIES = 6
DELAY = 5  # seconds between retries

seen_cves = set()  # To avoid CVE duplicates

print("Application Name,CVE ID,CVSS Score")  # CSV header

for i, v in enumerate(versions):
    cpe_name = f"cpe:2.3:a:1password:1password:{v}:*:*:*:*:macos:*:*"
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            conn = http.client.HTTPSConnection("services.nvd.nist.gov", timeout=10)
            conn.request("GET", f"/rest/json/cves/2.0?cpeName={cpe_name}")

            res = conn.getresponse()
            data = res.read().decode("utf-8")

            if not data.strip():
                raise ValueError("Empty response")

            cve_data = json.loads(data)
            vulnerabilities = cve_data.get("vulnerabilities", [])

            for vuln in vulnerabilities:
                cve_id = vuln["cve"]["id"]

                # Skip if we've already printed this CVE
                if cve_id in seen_cves:
                    continue

                seen_cves.add(cve_id)

                # Get Primary NVD CVSS v3.1 score
                score = None
                for metric in vuln["cve"].get("metrics", {}).get("cvssMetricV31", []):
                    if metric.get("source") == "nvd@nist.gov" and metric.get("type") == "Primary":
                        score = metric["cvssData"]["baseScore"]
                        break

                if score is not None:
                    print(f"1Password,{cve_id},{score}")

            break  # success, exit retry loop

        except (json.JSONDecodeError, ValueError, http.client.HTTPException) as e:
#           print(f"Attempt {attempt} failed for version {v}: {e}")
            if attempt < MAX_RETRIES:
                time.sleep(DELAY)
            else:
                pass
#           print(f"Skipping version {v} after {MAX_RETRIES} failed attempts")
    print_progress(i + 1, len(versions))
